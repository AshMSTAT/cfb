{
    "contents" : "#' @title Make Predictions\n#'\n#'\n#' @import blme dplyr\n#' @export\n#' @examples\n#'\n#' Prediction(\n#' data.frame(\n#'   ISO = c('Fast Source LLC', 'Merchant Pro Express')\n#'     , Industry = 'Retail'\n#'     , State = 'IL'\n#'     , Advance.Amount = 50000\n#'     , Payback.Amount = 50000*1.42\n#'     , Average.Credit.Score = 700\n#'     , Term = 6\n#'     , Third.Party.Payoff = 1\n#'     , Years.in.Business = 5\n#'     , Total.Commission = 5\n#'     , OfferID = 1\n#'     )\n#'   )\n#'\n#' Prediction(\n#' data.frame(\n#'   ISO = 'Money Pro Express LLC'\n#'     , Industry = 'Restaurants - Full Service'\n#'     , State = 'SC'\n#'     , Advance.Amount = 28000\n#'     , Payback.Amount = 28000*1.42\n#'     , Average.Credit.Score = 650\n#'     , Term = 6\n#'     , Third.Party.Payoff = 0\n#'     , Years.in.Business = 3.1\n#'   , Total.Commission = 6\n#'   , OfferID = 2\n#'      )\n#'   )\n#'\n#' Prediction(\n#' data.frame(\n#'   ISO = 'Advance Funds Network'\n#'     , Industry = 'Restaurants - Full Service'\n#'     , State = 'CA'\n#'     , Advance.Amount = 14000\n#'     , Payback.Amount = 14000*1.42\n#'     , Average.Credit.Score = 520.0\n#'     , Term = 6\n#'     , Third.Party.Payoff = 0\n#'     , Years.in.Business = 1.19\n#'   , Total.Commission = 6\n#'   , OfferID = 3\n#'   )\n#'   )\n#'\n#' Prediction(\n#' data.frame(\n#'   ISO = 'Entrust'\n#'     , Industry = 'Grocery'\n#'     , State = 'GA'\n#'     , Advance.Amount = 110000\n#'     , Payback.Amount = 110000*1.42\n#'     , Average.Credit.Score = 506.0\n#'     , Term = 6\n#'     , Third.Party.Payoff = 1\n#'     , Years.in.Business = 36.47\n#'   , Total.Commission = 4\n#'   , OfferID = 4\n#'   )\n#'   )\n#'\n#' Prediction(\n#' data.frame(\n#'   ISO = c('Fast Source LLC')\n#'     , Industry = 'Retail'\n#'     , State = 'IL'\n#'     , Advance.Amount = 50000\n#'     , Payback.Amount = 50000*1.42\n#'     , Average.Credit.Score = c(700, 901, 900, NA)\n#'     , Term = 6\n#'     , Third.Party.Payoff = 1\n#'     , Years.in.Business = 5\n#'     , Total.Commission = 5\n#'     , OfferID = 1\n#'     )\n#'   )\n\n\n\nPrediction <- function(input){\n  #input can either be csv file or data\n  newdata <- if(is.character(input) && file.exists(input)){\n    read.csv(input)\n  } else {\n    data.frame(input)\n  }\n  if(!'ISO' %in% names(newdata)){\n      stop(\"ISO needs to be in the dataset for scoring\")\n  }\n  if(!'Industry' %in% names(newdata)){\n      stop(\"Industry needs to be in the dataset for scoring\")\n  }\n  if(!'State' %in% names(newdata)){\n      stop(\"State needs to be in the dataset for scoring\")\n  }\n  if(!'Advance.Amount' %in% names(newdata)){\n      stop(\"Advance.Amount needs to be in the dataset for scoring\")\n  }\n  if(!'Payback.Amount' %in% names(newdata)){\n      stop(\"Payback.Amount needs to be in the dataset for scoring\")\n  }\n  if(!'Average.Credit.Score' %in% names(newdata)){\n      stop(\"Average.Credit.Score needs to be in the dataset for scoring\")\n  }\n  if(!'Term' %in% names(newdata)){\n      stop(\"Term needs to be in the dataset for scoring\")\n  }\n  if(!'Third.Party.Payoff' %in% names(newdata)){\n      stop(\"Third.Party.Payoff needs to be in the dataset for scoring\")\n  }\n  if(!'Years.in.Business' %in% names(newdata)){\n      stop(\"Years.in.Business needs to be in the dataset for scoring\")\n  }\n  if(!'Total.Commission' %in% names(newdata)){\n      stop(\"Total.Commission needs to be in the dataset for scoring\")\n  }\n  if(!'OfferID' %in% names(newdata)){\n      newdata$OfferID = NA\n  }\n\n\n  Test <- data.frame(\n    ISO = as.factor(newdata$ISO)\n    , Industry = as.factor(newdata$Industry)\n    , State = as.factor(newdata$State)\n    , advanceAmount = Num(newdata$Advance.Amount)/10000\n    , creditscore2 = Num(newdata$Average.Credit.Score)/100\n    , Term = Num(newdata$Term)\n    , payoff = Num(newdata$Third.Party.Payoff > 0)\n    , yrs.bus = log(Num(newdata$Years.in.Business+.1))\n    , Total.Commission = Num(newdata$Total.Commission)\n    , FactorRate = Num(newdata$Payback.Amount)/Num(newdata$Advance.Amount)\n    )\n\n  has900s<-Test$creditscore2 > 9 | is.na(Test$creditscore2)\n  no900s<- !(Test$creditscore2 > 9 | is.na(Test$creditscore2))\n\n  if(any(has900s)){\n    Test$probability[has900s] <-\n    predict(BayesModel9000, Test[has900s,]\n            , type = 'response', allow.new.levels = TRUE)\n    Test$Model[has900s] <- 'BayesModel9000'\n  }\n  if(any(no900s)){\n    Test$probability[no900s] <-\n    predict(BayesModel, Test[no900s,]\n            , type = 'response', allow.new.levels = TRUE)\n    Test$Model[no900s] <- 'BayesModel'\n  }\n\n  results<-data.frame(\n    probability = 1 - Test$probability\n    , ModelVersion = \"1.0.1\"\n    , Model = Test$Model\n    , OfferID = newdata$OfferID\n    , NewISO = !newdata$ISO %in% levels(BayesModel@flist$ISO)\n    , NewIndustry = !newdata$Industry %in% levels(BayesModel@flist$Industry)\n    , NewState = !newdata$State %in% levels(BayesModel@flist$State)\n    )\n\n  return(results)\n}\n",
    "created" : 1422986514526.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2247991238",
    "id" : "223703B0",
    "lastKnownWriteTime" : 1421446235,
    "path" : "~/Dropbox/RTO Analytics/Analytics/Advances/Advances/AdvancesOCPU/R/Prediction.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "type" : "r_source"
}