data.frame %>%
arrange(desc(Interception)) %>%
.[1:50,]
p %>%
group_by(shortname) %>%
summarise(
Attempts = n()
, Completed = sum(Complete)
, Completion = mean(Complete)*100
, PassingYards = sum(PassYards, na.rm = TRUE)
, PassAvg = PassingYards/Attempts
, Great10 = mean(PassYards >= 10, na.rm = TRUE)
, Interceptions = sum(Interception)
) %>%
na.omit() %>%
data.frame %>%
arrange(desc(Interceptions)) %>%
.[1:50,]
p %>%
group_by(shortname) %>%
summarise(
Attempts = n()
, Completed = sum(Complete)
, Completion = mean(Complete)*100
, PassingYards = sum(PassYards, na.rm = TRUE)
, PassAvg = PassingYards/Attempts
, Great10 = mean(PassYards >= 10, na.rm = TRUE)
, Interceptions = sum(Interception)
) %>%
na.omit() %>%
data.frame %>%
arrange(desc(PassingYards)) %>%
.[1:50,]
p %>%
group_by(shortname) %>%
summarise(
Attempts = n()
, Completed = sum(Complete)
, Completion = mean(Complete)*100
, PassingYards = sum(PassYards, na.rm = TRUE)
, PassAvg = PassingYards/Attempts
, Great10 = mean(PassYards >= 10, na.rm = TRUE)
, Interceptions = sum(Interception)
) %>%
na.omit() %>%
data.frame %>%
arrange(desc(PassingYards)) %>%
.[1:100,]
library(blme)
g1 <- bglmer(Complete ~ (1|Passer) + (1|Opponent)
,data = p %>% filter(PassAtt)
,family = 'binomial')
g2 <- blmer(PassYards ~ (1|Passer) + (1|Opponent)
,data = p %>% filter(PassAtt))
data.frame(
Passer = unique(p$Passer)
,Score = predict(g1, data.frame(Passer = unique(p$Passer), Opponent ='?')
, allow.new.levels = TRUE, type = 'response')
,Score2 = predict(g2, data.frame(Passer = unique(p$Passer), Opponent ='?')
, allow.new.levels = TRUE, type = 'response')
) %>%
mutate(
Rating = Score*Score2
) %>%
arrange(Rating) %>%
View
p %>%
group_by(shortname) %>%
summarise(
Attempts = n()
, Completed = sum(Complete)
, Completion = mean(Complete)*100
, PassingYards = sum(PassYards, na.rm = TRUE)
, PassAvg = PassingYards/Attempts
, Great10 = mean(PassYards >= 10, na.rm = TRUE)
, Interceptions = sum(Interception)
) %>%
na.omit() %>%
data.frame %>%
arrange(desc(PassingYards)) %>%
.[1:100,]
p %>%
group_by(shortname,Receiver) %>%
summarise(
Attempts = n()
, Completed = sum(Complete)
, Completion = mean(Complete)*100
, PassingYards = sum(PassYards, na.rm = TRUE)
, PassAvg = PassingYards/Attempts
, Great10 = mean(PassYards >= 10, na.rm = TRUE)
, Interceptions = sum(Interception)
) %>%
na.omit() %>%
data.frame %>%
arrange(desc(PassingYards)) %>%
.[1:50,]
p %>%
group_by(Passer,Receiver) %>%
summarise(
Attempts = n()
, Completed = sum(Complete)
, Completion = mean(Complete)*100
, PassingYards = sum(PassYards, na.rm = TRUE)
, PassAvg = PassingYards/Attempts
, Great10 = mean(PassYards >= 10, na.rm = TRUE)
, Interceptions = sum(Interception)
) %>%
na.omit() %>%
data.frame %>%
arrange(desc(PassingYards)) %>%
.[1:50,]
library(RPostgres)
library(foreach)
library(DBI)
library(cfb)
con <- dbConnect(RPostgres::Postgres()
, host='cfb.cjkdk120ktqn.us-west-1.rds.amazonaws.com'
, port='5432'
, dbname='cfb_master'
, user='JackStat'
, password='XG1372e7')
# - run Sagarin Scrape
ss <- try(scrapeSagarin())
# - pulling last entry in db
lastEntry <-
dbGetQuery(con
,'SELECT * FROM scrape
ORDER BY scrape_ts desc
LIMIT 1'
)
if(trim(lastEntry$sagarin_title) == ss$timePeriodRated){
## - update scrape table to show no update
updateScrape <- dbSendQuery(con
,paste0(
'insert into scrape (scrape_ts, success, sagarin_updated, sagarin_title) values ('
,"'",ss$request_ts,"'", ','
,class(ss) !='try-error', ','
,'FALSE,'
,"'",ss$timePeriodRated,"');"
)
)
# dbGetRowsAffected(updateScrape)
} else {
# inserting scrape status
updateScrape <- dbSendQuery(con
,paste0(
## - update scrape table for statuses
'insert into scrape (scrape_ts, success, sagarin_updated, sagarin_title) values ('
,"'",ss$request_ts,"'", ','
,class(ss) !='try-error', ','
,'TRUE,'
,"'",ss$timePeriodRated,"');"
)
)
getScrapeID <-
dbGetQuery(con
,paste0('SELECT * FROM scrape
WHERE scrape_ts = ', "'", ss$request_ts, "'")
)
updateSagarin <-
function(i){
dbSendQuery(con
,paste0(
'insert into sagarin (scrape_id, rank, team, division, rating, wins, losses, ties, schedule_rating, schedule_rank, win_top_10, loss_top_10, ties_top_10, win_top_30, loss_top_30, ties_top_30, golden_mean_rating, golden_mean_rank, predictor_rating, predictor_rank',
# ', elo_rating, elo_rank
', recent_rating, recent_rank
) values ('
,getScrapeID$id, ','
,ss$Rankings$rank[i], ','
,"'", ss$Rankings$team[i],"'", ','
,"'", ss$Rankings$division[i],"'", ','
,ss$Rankings$rating[i], ','
,ss$Rankings$wins[i], ','
,ss$Rankings$losses[i], ','
,ss$Rankings$ties[i], ','
,ss$Rankings$schedule_rating[i], ','
,ss$Rankings$schedule_rank[i], ','
,ss$Rankings$win_top_10[i], ','
,ss$Rankings$loss_top_10[i], ','
,ss$Rankings$ties_top_10[i], ','
,ss$Rankings$win_top_30[i], ','
,ss$Rankings$loss_top_30[i], ','
,ss$Rankings$ties_top_30[i], ','
,ss$Rankings$golden_mean_rating[i], ','
,ss$Rankings$golden_mean_rank[i], ','
,ss$Rankings$predictor_rating[i], ','
,ss$Rankings$predictor_rank[i], ','
,ss$Rankings$recent_rating[i], ','
,ss$Rankings$recent_rank[i], ");"
)
)
}
foreach(i = 1: nrow(ss$Rankings)) %do% {
updateSagarin(i)
}
}
ss$Rankings %>% View
library(dplyr)
ss$Rankings %>% View
warnings()
library(RPostgres)
library(foreach)
library(DBI)
library(cfb)
con <- dbConnect(RPostgres::Postgres()
, host='cfb.cjkdk120ktqn.us-west-1.rds.amazonaws.com'
, port='5432'
, dbname='cfb_master'
, user='JackStat'
, password='XG1372e7')
# - run Sagarin Scrape
ss <- try(scrapeSagarin())
# - pulling last entry in db
lastEntry <-
dbGetQuery(con
,'SELECT * FROM scrape
ORDER BY scrape_ts desc
LIMIT 1'
)
if(trim(lastEntry$sagarin_title) == ss$timePeriodRated){
## - update scrape table to show no update
updateScrape <- dbSendQuery(con
,paste0(
'insert into scrape (scrape_ts, success, sagarin_updated, sagarin_title) values ('
,"'",ss$request_ts,"'", ','
,class(ss) !='try-error', ','
,'FALSE,'
,"'",ss$timePeriodRated,"');"
)
)
# dbGetRowsAffected(updateScrape)
} else {
# inserting scrape status
updateScrape <- dbSendQuery(con
,paste0(
## - update scrape table for statuses
'insert into scrape (scrape_ts, success, sagarin_updated, sagarin_title) values ('
,"'",ss$request_ts,"'", ','
,class(ss) !='try-error', ','
,'TRUE,'
,"'",ss$timePeriodRated,"');"
)
)
getScrapeID <-
dbGetQuery(con
,paste0('SELECT * FROM scrape
WHERE scrape_ts = ', "'", ss$request_ts, "'")
)
updateSagarin <-
function(i){
dbSendQuery(con
,paste0(
'insert into sagarin (scrape_id, rank, team, division, rating, wins, losses, ties, schedule_rating, schedule_rank, win_top_10, loss_top_10, ties_top_10, win_top_30, loss_top_30, ties_top_30, golden_mean_rating, golden_mean_rank, predictor_rating, predictor_rank',
# ', elo_rating, elo_rank
', recent_rating, recent_rank
) values ('
,getScrapeID$id, ','
,ss$Rankings$rank[i], ','
,"'", ss$Rankings$team[i],"'", ','
,"'", ss$Rankings$division[i],"'", ','
,ss$Rankings$rating[i], ','
,ss$Rankings$wins[i], ','
,ss$Rankings$losses[i], ','
,ss$Rankings$ties[i], ','
,ss$Rankings$schedule_rating[i], ','
,ss$Rankings$schedule_rank[i], ','
,ss$Rankings$win_top_10[i], ','
,ss$Rankings$loss_top_10[i], ','
,ss$Rankings$ties_top_10[i], ','
,ss$Rankings$win_top_30[i], ','
,ss$Rankings$loss_top_30[i], ','
,ss$Rankings$ties_top_30[i], ','
,ss$Rankings$golden_mean_rating[i], ','
,ss$Rankings$golden_mean_rank[i], ','
,ss$Rankings$predictor_rating[i], ','
,ss$Rankings$predictor_rank[i], ','
,ss$Rankings$recent_rating[i], ','
,ss$Rankings$recent_rank[i], ");"
)
)
}
foreach(i = 1: nrow(ss$Rankings)) %do% {
updateSagarin(i)
}
}
pbpRaw <- foreach(k = 1:9, .combine = 'rbind', .errorhandling = 'remove') %do% {
scoreboard <- NCAAscoreboard(2015,k)
foreach(i = 1:nrow(scoreboard), .combine = 'rbind', .verbose = TRUE, .errorhandling = 'remove') %do% {
nn <- NCAApbp(as.character(scoreboard$pbpURL[i]))
}
}
pbpRaw$rawText <- pbpRaw$scoreText
p <- cleanPlayers(pbpRaw)
p<-ParseConversion(p)
p<-ParseInterception(p)
p<-ParseFumble(p)
p<-ParseTouchdown(p)
p<-ParseRush(p)
p<-ParsePass(p)
p<-ParseFG(p)
p<-ParseKick(p)
p<-ParsePunt(p)
p<-ParsePenalty(p)
p[!p$PassAtt & !p$RushAtt & !p$FieldGoal &
!p$Kick & !p$Punt & !p$Penalty &
!p$Fumble & !p$Interception,'scoreText']
library(foreach)
pbpRaw <- foreach(k = 1:9, .combine = 'rbind', .errorhandling = 'remove') %do% {
scoreboard <- NCAAscoreboard(2015,k)
foreach(i = 1:nrow(scoreboard), .combine = 'rbind', .verbose = TRUE, .errorhandling = 'remove') %do% {
nn <- NCAApbp(as.character(scoreboard$pbpURL[i]))
}
}
pbpRaw$rawText <- pbpRaw$scoreText
p <- cleanPlayers(pbpRaw)
p<-ParseConversion(p)
p<-ParseInterception(p)
p<-ParseFumble(p)
p<-ParseTouchdown(p)
p<-ParseRush(p)
p<-ParsePass(p)
p<-ParseFG(p)
p<-ParseKick(p)
p<-ParsePunt(p)
p<-ParsePenalty(p)
p[!p$PassAtt & !p$RushAtt & !p$FieldGoal &
!p$Kick & !p$Punt & !p$Penalty &
!p$Fumble & !p$Interception,'scoreText']
library(cfb)
pbpRaw <- foreach(k = 1:9, .combine = 'rbind', .errorhandling = 'remove') %do% {
scoreboard <- NCAAscoreboard(2015,k)
foreach(i = 1:nrow(scoreboard), .combine = 'rbind', .verbose = TRUE, .errorhandling = 'remove') %do% {
nn <- NCAApbp(as.character(scoreboard$pbpURL[i]))
}
}
pbpRaw$rawText <- pbpRaw$scoreText
p <- cleanPlayers(pbpRaw)
p<-ParseConversion(p)
p<-ParseInterception(p)
p<-ParseFumble(p)
p<-ParseTouchdown(p)
p<-ParseRush(p)
p<-ParsePass(p)
p<-ParseFG(p)
p<-ParseKick(p)
p<-ParsePunt(p)
p<-ParsePenalty(p)
p[!p$PassAtt & !p$RushAtt & !p$FieldGoal &
!p$Kick & !p$Punt & !p$Penalty &
!p$Fumble & !p$Interception,'scoreText']
p %>%
group_by(shortname, Passer) %>%
summarise(
Attempts = n()
, Completes = sum(Complete)
, Completion = mean(Complete)*100
, PassingYards = sum(PassYards, na.rm = TRUE)
, PassAvg = PassingYards/Attempts
, Great10 = mean(PassYards >= 10, na.rm = TRUE)
, Interceptions = sum(Interception)
) %>%
na.omit %>%
ungroup() %>%
arrange(desc(PassingYards)) %>%
data.frame
# install.packages(c("devtools", "foreach", "dplyr"))
# devtools::install_github("JackStat/cfb")
library(cfb)
library(foreach)
library(dplyr)
p %>%
group_by(shortname, Passer) %>%
summarise(
Attempts = n()
, Completes = sum(Complete)
, Completion = mean(Complete)*100
, PassingYards = sum(PassYards, na.rm = TRUE)
, PassAvg = PassingYards/Attempts
, Great10 = mean(PassYards >= 10, na.rm = TRUE)
, Interceptions = sum(Interception)
) %>%
na.omit %>%
ungroup() %>%
arrange(desc(PassingYards)) %>%
data.frame
p %>%
group_by(shortname, Passer) %>%
summarise(
Attempts = n()
, Completes = sum(Complete)
, Completion = mean(Complete)*100
, PassingYards = sum(PassYards, na.rm = TRUE)
, PassAvg = PassingYards/Attempts
, Great10 = mean(PassYards >= 10, na.rm = TRUE)
, Interceptions = sum(Interception)
) %>%
na.omit %>%
ungroup() %>%
arrange(desc(PassingYards)) %>%
data.frame %>%
.[1:10,]
p %>%
group_by(shortname, Passer) %>%
summarise(
Attempts = n()
, Completes = sum(Complete)
, Completion = mean(Complete)*100
, PassingYards = sum(PassYards, na.rm = TRUE)
, PassAvg = PassingYards/Attempts
, Great10 = mean(PassYards >= 10, na.rm = TRUE)
, Interceptions = sum(Interception)
) %>%
na.omit %>%
ungroup() %>%
arrange(desc(PassingYards)) %>%
data.frame %>%
.[1:10,]
p %>%
group_by(shortname, Rusher) %>%
summarise(
Rushes = n()
,RushYards = sum(RushYards, na.rm = TRUE))
p %>%
group_by(shortname, Rusher) %>%
summarise(
Rushes = n()
,RushYards = sum(RushYards, na.rm = TRUE)) %>%
na.omit %>%
ungroup() %>%
arrange(desc(PassingYards)) %>%
data.frame %>%
.[1:10,]
p %>%
group_by(shortname, Rusher) %>%
summarise(
Rushes = n()
,RushYards = sum(RushYards, na.rm = TRUE)) %>%
na.omit %>%
ungroup() %>%
arrange(desc(RushYards)) %>%
data.frame %>%
.[1:10,]
p %>%
group_by(shortname,Passer,Receiver) %>%
summarise(
Attempts = n()
, Completion = mean(Complete)*100
, PassingYards = sum(PassYards, na.rm = TRUE)
, PassAvg = PassingYards/Attempts
, Great10 = mean(PassYards >= 10, na.rm = TRUE)
, Interceptions = sum(Interception)
) %>%
na.omit() %>%
data.frame
p %>%
group_by(shortname,Passer,Receiver) %>%
summarise(
Attempts = n()
, Completion = mean(Complete)*100
, PassingYards = sum(PassYards, na.rm = TRUE)
, PassAvg = PassingYards/Attempts
, Great10 = mean(PassYards >= 10, na.rm = TRUE)
, Interceptions = sum(Interception)
) %>%
na.omit() %>%
data.frame %>%
.[1:10,]
p %>%
group_by(shortname,Passer,Receiver) %>%
summarise(
Attempts = n()
, Completion = mean(Complete)*100
, PassingYards = sum(PassYards, na.rm = TRUE)
, PassAvg = PassingYards/Attempts
, Great10 = mean(PassYards >= 10, na.rm = TRUE)
, Interceptions = sum(Interception)
) %>%
na.omit() %>%
ungroup() %>%
arrange(desc(PassingYards)) %>%
data.frame %>%
.[1:10,]
p %>%
group_by(Passer,Receiver) %>%
summarise(
Attempts = n()
, Completed = sum(Complete)
, Completion = mean(Complete)*100
, PassingYards = sum(PassYards, na.rm = TRUE)
, PassAvg = PassingYards/Attempts
, Great10 = mean(PassYards >= 10, na.rm = TRUE)
, Interceptions = sum(Interception)
) %>%
na.omit() %>%
data.frame %>%
arrange(desc(PassingYards)) %>%
.[1:50,]
p %>%
group_by(shortname,Passer,Receiver) %>%
summarise(
Attempts = n()
, Completion = mean(Complete)*100
, PassingYards = sum(PassYards, na.rm = TRUE)
, PassAvg = PassingYards/Attempts
, Great10 = mean(PassYards >= 10, na.rm = TRUE)
, Interceptions = sum(Interception)
) %>%
na.omit() %>%
ungroup() %>%
arrange(desc(Great10)) %>%
data.frame %>%
.[1:10,]
